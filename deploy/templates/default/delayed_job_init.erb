#!/bin/bash

# define variables that are required
: ${SERVICE_PATH:='<%= @current_path %>'}
: ${SERVICE_ENV:="<%= @environment %>"}
: ${SERVICE_QUEUE:='<%= @queues %>'}
: ${SERVICE_QUEUE_COUNT:='<%= @queue_count %>'}
: ${SERVICE_USER:='<%= @user %>'}
: ${SERVICE_GROUP:='<%= @group %>'}
: ${RUBY_PATH:='/usr/local/bin/'}

SERVICE_LOG=${SERVICE_PATH}/log/delayed_job.log
set_path="cd ${SERVICE_PATH}"

touch ${SERVICE_LOG}
chown ${SERVICE_USER}:${SERVICE_GROUP} ${SERVICE_LOG}

start_dj_server() {
  echo -n "Starting delayed_job:"
  su - ${SERVICE_USER} -c "${set_path} && env ${SERVICE_ENV} ${RUBY_PATH}/ruby ${RUBY_PATH}/bundle exec script/delayed_job -n ${SERVICE_QUEUE_COUNT} --queues=${SERVICE_QUEUE} start" >> ${SERVICE_LOG} 2>&1
  res=$?
  if [ $res -eq 0 ]; then
    echo "done."
  else
    echo "failed."
  fi
  return $res
}

stop_dj_server() {
  echo -n "Stopping delayed_job: "
  su - ${SERVICE_USER} -c "${set_path} && env ${SERVICE_ENV} ${RUBY_PATH}/ruby ${RUBY_PATH}/bundle exec script/delayed_job stop" >> ${SERVICE_LOG} 2>&1
  res=$?
  if [ $res -eq 0 ]; then
    echo "done."
  else
    echo "failed."
  fi
  return $res
}

zap_dj_server() {
  echo -n "Zapping delayed_job: "
  ${set_path}

  for f in tmp/pids/delayed_job.*; do
    kill -9 $(cat $f) >> ${SERVICE_LOG} 2>&1
    rm -f $f
  done

  echo "done."
  cd -
  return 0
}

case "$1" in
  start)
    start_dj_server
    exit $?
  ;;
  stop)
    stop_dj_server
    exit $?
  ;;
  restart)
    stop_dj_server || zap_dj_server
    start_dj_server
    exit $?
  ;;
  zap)
    zap_dj_server
    exit $?
  ;;
  *)
    N=/etc/init.d/$(basename $0)
    echo "Usage: $N {start|stop|restart|zap}" >&2
    exit 1
  ;;
esac

exit 0